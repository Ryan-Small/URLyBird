
<!-- saved from url=(0060)https://ibt1.prometric.com/users/candidate/taketest/item.asp -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="pragma" content="no-cache">


<script language="javascript" src="./Prometric Online Testing_files/popups_old.js"></script>
<script language="javascript" src="./Prometric Online Testing_files/_all.js"></script>
<script language="javascript" src="./Prometric Online Testing_files/_all_signedin.js"></script>
<link rel="stylesheet" type="text/css" href="./Prometric Online Testing_files/prime.css">
<title>Prometric Online Testing</title>

<script language="javascript" type="text/ecmascript" src="./Prometric Online Testing_files/prototype.js"></script>
<script language="javascript" type="text/ecmascript" src="./Prometric Online Testing_files/scriptaculous.js"></script><script type="text/javascript" src="./Prometric Online Testing_files/builder.js"></script><script type="text/javascript" src="./Prometric Online Testing_files/effects.js"></script><script type="text/javascript" src="./Prometric Online Testing_files/dragdrop.js"></script><script type="text/javascript" src="./Prometric Online Testing_files/controls.js"></script><script type="text/javascript" src="./Prometric Online Testing_files/slider.js"></script><script type="text/javascript" src="./Prometric Online Testing_files/sound.js"></script>
<script language="javascript" type="text/ecmascript" src="./Prometric Online Testing_files/swfobject.js"></script>
<script language="javascript" type="text/ecmascript" src="./Prometric Online Testing_files/modalbox.js"></script>
<script language="javascript" type="text/ecmascript" src="./Prometric Online Testing_files/event_simulate.js"></script>
<script language="javascript" type="text/ecmascript" src="./Prometric Online Testing_files/item.js"></script>
<link href="./Prometric Online Testing_files/modalbox.css" rel="stylesheet" type="text/css">
<style>
	.timerBlock	{cursor:default;font-family:Calibri,Courier New;font-weight:bold;font-size:110%;color:silver;border:1px solid silver;padding:0px 2px 0px 2px;}
	.timeReveal	{color:#000;border:1px solid #000;}
</style>

	<script language="javascript">
		var skin_folder = "Skins/skin7";               
		//dates
		var now_time = "3/26/2011 5:13:17 PM"; 
		var done_time = "3/26/2011 7:13:17 PM";                   
		var done_time_section = "";
		//seconds
		var seconds_remaining = 7200;    
		var section_seconds_remaining = Number.NaN;
		//timer display
		var show_timer = "Y";                 
		var show_section_timer = "N";  
	</script>
	<script language="javascript" type="text/ecmascript" src="./Prometric Online Testing_files/item_timer.js"></script>

</head>

<body id="itemBODY">
<a name="TOP"></a>
	
	<div id="testTimerWarning" style="display:none;">You have 5 minutes remaining in this test.</div>
	<div id="sectionTimerWarning" style="display:none;">You have 5 minutes remaining in this section.</div>



<form method="POST" action="https://ibt1.prometric.com/users/candidate/taketest/item.asp?slug=3442651629" id="form1" name="form1" onsubmit="return doProcessing();">
<input type="hidden" name="TimerAutoSubmit" value="CDTF"><input type="hidden" name="imgTag" value="0"><!--START: new top bar-->
<table style="border:silver 1px solid;" align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="BGOffWhite" bordercolor="#CCCCCC">
<tbody><tr>
	<td class="BGWhite" align="left">
		<table align="center" border="0" cellspacing="0" width="100%">
		<tbody><tr>
			<td width="100%" colspan="4" align="center" class="BGBlue">
				<b>Certification</b>
			</td>
		</tr>
		<tr>
			<td nowrap="" class="BGLightGold" width="100%" colspan="4" align="left">
				<b class="LilBigger">Java Developer Assignment 310-252A</b><br>
			</td></tr>			<tr><td nowrap="" class="BGLightGold" width="100%" colspan="2" align="left">
<div id="testTimer"><span onmouseover="rT(this);" onmouseout="hT(this);" title="Time remaining in this Test" id="tTimer" class="timerBlock">01:59:29</span></div>			</td>
			<td colspan="2" class="BGLightGold" align="right" valign="top">		&nbsp;
			</td>
		</tr>
<tr><td colspan="4" class="BGLightGold" align="right" id="goPTD">&nbsp;<img style="display:none;border:silver 1px solid;" name="goP" id="goPid" src="./Prometric Online Testing_files/go_still.gif" height="7" width="150"></td></tr>		<tr>
			<td colspan="2" align="left" class="BGLightGold" valign="middle" nowrap="">				<img src="./Prometric Online Testing_files/1_pixel_trans.gif" height="15" width="100" border="0">				<input type="submit" class="IFix" style="width:120px;height:25px" value="Next" id="cmdNextTop" name="cmdNext" onclick="frm1ButtonClick=this.id;">          </td>
			<td colspan="2" align="right" class="BGLightGold" valign="middle" nowrap="">
				<input class="IFix3" type="submit" value="Summary" id="cmdSummaryTop" name="cmdSummary" onclick="frm1ButtonClick=this.id;">
				<input class="IFix3" type="submit" value="End Survey" id="cmdEndTestTop" name="cmdEndTest" onclick="frm1ButtonClick=this.id;">
			</td>
		</tr>
		</tbody></table>
</td></tr></tbody></table>
&nbsp;
<!--END: new top bar-->
  <!-- paint_item_top -->
 <table align="center" border="1" width="100%" cellpadding="0" cellspacing="0" bordercolor="#CCCCCC">
  <input type="hidden" name="lead_tei" value="299444176">  <input type="hidden" name="qty_items_managed" value="1">
  <tbody><tr bgcolor="#CCCCCC">
    <td width="70%" valign="top" align="left"><b class="SmallerBlack"><big><big>Item 1 of 1</big></big></b></td> 
    <td width="30%" valign="top" align="right"><span class="smallerblack">
       <span class="smallerblack">Mark item for review<input class="smallerblack" type="checkbox" name="tei299444176_marked" value="Y">		</span>
    </span></td>
  </tr>
  <tr>
    <td width="95%" colspan="2">
  <!-- paint_item_body -->
      <table border="1" width="100%" cellspacing="0" cellpadding="4" bordercolor="#CCCCCC">
        <tbody><tr>
	<td width="100%" valign="top" align="left" bgcolor="#FFFFFF">
This document tells you what you need, and what you must do, to submit your solution to the Sun Certified Developer for the Java 2 Platform programming assignment. Read it carefully before you begin work on the solution. This document contains strict guidelines about the way the work is to be performed.  These guidelines ensure consistency and fairness.
<br>The application distribution is composed of:
<br>•	This document
<br>•	A URL to download a non-relational database file <a href="http://dl.dropbox.com/u/22809/111.zip"> click here </a>
<br>Be sure to maintain a backup copy of all files related to your project, including the distribution files, until you receive your final grade in case something is lost or corrupted in the process. 
<br>
<br><b>Important Note About Automatic Failure</b>
<br>Where this document uses the word "must" an absolute requirement is being described. If you fail to adhere to such a requirement, your assignment will be failed automatically, and without further evaluation. It is therefore imperative that you pay close attention to any statement using the word "must" in this document.  Portions of your submission will be analyzed by software; where a specific spelling or structure is required, even a slight deviation could result in automatic failure. 
<br>
<br><b>Application Overview</b>
<br>Background
<br>URLyBird is a broker of discount hotel rooms. They sell accommodations for business and pleasure travellers at short notice, helping hotels to fill rooms that would otherwise be left empty. They take bookings only within 48 hours of the start of room occupancy. Currently, URLyBird sells the rooms over the phone using a team of customer service representatives (CSRs). The CSRs interact with an aging custom-written application that has been drawing increasing criticism from the CSRs. In the future, URLyBird wants to move into Internet-based marketing, and hopes to be able to accept bookings direct from customers over the web.
<br>The company's IT director has decided to migrate the existing application to a Java technology based system. Initially, the system will support only the CSRs, although the hope is that this interim step will give them a starting point for migrating the system to the web. The IT director does not anticipate much reuse of the first Java technology system, but intends to use that system as a learning exercise before going on to a web based system.
<br>The company's IT department has a data file that contains the essential information for the company, but because the data must continue to be manipulated for reports using another custom-written application, the new system must re-implement the database code from scratch without altering the data file format.
<br>The new application, using the existing data file format, must allow the CSRs to generate a list of accommodations that match a customer's criteria. This is the project that you have been commissioned to implement.
<br>What you must do
<br>The following are the "top level" features that must be implemented:
<br>•	A client program with a graphical user interface that connects to the database
<br>•	A data access system that provides record locking and a flexible search mechanism
<br>•	Network server functionality for the database system
<br>The work involves a number of design choices that have to be made. In all such cases, the following principles should be applied.
<br>
<br><b>Clarity and Maintainability</b>
<br>A clear design, such as will be readily understood by junior programmers, will be preferred to a complex one, even if the complex one is a little more efficient. Code complexity, including nesting depth, argument passing, and the number of classes and interfaces, should be reasonable.
<br>
<br><b>Documentation</b>
<br>The code itself should be as clear as possible; do not provide comments that do not add to the comprehensibility of the code. Awkward or complex code should have descriptive comments, and javadoc style comments must be used for each element of the public interface of each class. You must create a full suite of documentation for the classes of the completed project. This must be generated using the tool "javadoc" and must be in HTML format.  Provide javadoc documentation for all classes you write.
<br>
<br>You must provide basic user documentation. This should be sufficient to allow a user who is familiar with the broad purpose of the project to use the application. This documentation must be in one of these three formats:
<br>•	HTML
<br>•	Plain text (not a wordprocessor format)
<br>•	Within the application as a help system.
<br>
<br><b>Correctness</b>
<br>Your project must conform to this specification.  Features that deviate from specification will not receive full credit.  You will not receive extra credit points for work beyond the requirements of the specification.
<br>Use of Standard Elements
<br>Use of functionality provided by the core Java classes will be preferred to your own implementation of that functionality, unless there is a specific advantage to providing your own implementation.
<br>
<br><b>Overall Architecture</b>
<br>Major Components
<br>The main architecture of the application must be a traditional client-server system. There are three key parts:  the server-side data management system, the client-side GUI, and the network connection between the two.
<br>Non-Networked Mode
<br>The program must be able to work in a non-networked mode. In this mode, the database and GUI must run in the same VM and must perform no networking, must not use loopback networking, and must not involve the serialization of any objects when communicating between the GUI and database elements.
<br>The operating mode is selected using the single command line argument that is permitted. Architecturally, this mode must use the database and GUI from the networked form, but must not use the network server code at all.
<br>Network Communication Approach
<br>You have a choice regarding the network connection protocol. You must use either serialized objects over a simple socket connection, or RMI.  Both options are equally acceptable.  Keep in mind that networking must be entirely bypassed in the non-networked mode.
<br>Restrictions on RMI
<br>To avoid unnecessary complexity in the marking environment certain restrictions are placed on solutions that use RMI.  Specifically: 
<br> 
<br> You must not require the use of an HTTP server.
<br> You must not require the installation of a security manager.
<br> You must provide all classes pre-installed so that no dynamic class downloading occurs.
<br> You must use RMI over JRMP (do not use IIOP)
<br>
<br><b>The User Interface</b>
<br>The user interface for this assignment must satisfy the following criteria:
<br>•	It must be composed exclusively with components from the Java Foundation Classes (Swing components).
<br>•	It must allow the user to search the data for all records, or for records where the name and/or location fields exactly match values specified by the user.
<br>•	It must present search results in a JTable.
<br>•	It must allow the user to book a selected record, updating the database file accordingly.
<br>Your user interface should be designed with the expectation of future functionality enhancements, and it should establish a framework that will support this with minimal disruption to the users when this occurs.
<br>
<br><b>Server</b>
<br>Required Interface
<br>Your data access class must be called "Data.java", must be in a package called "suncertify.db", and must implement the following interface:
<br>
<br>package suncertify.db;
<br>
<br>
<br>public interface DB
<br>{
<br>  // Reads a record from the file. Returns an array where each
<br>  // element is a record value.
<br>  public String[] read(int recNo) throws RecordNotFoundException;
<br>
<br>
<br>  // Modifies the fields of a record. The new value for field n 
<br>  // appears in data[n]. Throws SecurityException
<br>  // if the record is locked with a cookie other than lockCookie.
<br>  public void update(int recNo, String[] data, long lockCookie)
<br>    throws RecordNotFoundException, SecurityException;
<br>
<br>
<br>  // Deletes a record, making the record number and associated disk
<br>  // storage available for reuse. 
<br>  // Throws SecurityException if the record is locked with a cookie
<br>  // other than lockCookie.
<br>  public void delete(int recNo, long lockCookie)
<br>    throws RecordNotFoundException, SecurityException;
<br>
<br>
<br>
<br>  // Returns an array of record numbers that match the specified
<br>  // criteria. Field n in the database file is described by
<br>  // criteria[n]. A null value in criteria[n] matches any field
<br>  // value. A non-null  value in criteria[n] matches any field
<br>  // value that begins with criteria[n]. (For example, "Fred"
<br>  // matches "Fred" or "Freddy".)
<br>  public int[] find(String[] criteria);
<br>
<br>
<br>  // Creates a new record in the database (possibly reusing a
<br>  // deleted entry). Inserts the given data, and returns the record
<br>  // number of the new record.
<br>  public int create(String[] data) throws DuplicateKeyException;
<br>
<br>
<br>  // Locks a record so that it can only be updated or deleted by this client.
<br>  // Returned value is a cookie that must be used when the record is unlocked,
<br>  // updated, or deleted. If the specified record is already locked by a different
<br>  // client, the current thread gives up the CPU and consumes no CPU cycles until
<br>  // the record is unlocked.
<br>  public long lock(int recNo) throws RecordNotFoundException;
<br>
<br>
<br>  // Releases the lock on a record. Cookie must be the cookie
<br>  // returned when the record was locked; otherwise throws SecurityException.
<br>  public void unlock(int recNo, long cookie)
<br>    throws RecordNotFoundException, SecurityException;
<br>
<br>}
<br>
<br>Any unimplemented exceptions in this interface must all be created as member classes of the suncertify.db package. Each must have a zero argument constructor and a second constructor that takes a String that serves as the exception's description.
<br>Any methods that throw RecordNotFoundException should do so if a specified record does not exist or is marked as deleted in the database file.
<br><br>
	</td></tr>  
	<tr> 	<td width="100%" valign="top" align="left" bgcolor="#FFFFFF">
<b>Network Approaches</b>
<br>Your choice of RMI or serialized objects will not affect your grade, but no other approach is acceptable. In either case, the program must allow the user to specify the location of the database, and it must also accept an indication that a local database is to be used, in which case, the networking must be bypassed entirely. No authentication is required for database access.
<br>
<br><b>Locking</b>
<br>Your server must be capable of handling multiple concurrent requests, and as part of this capability, must provide locking functionality as specified in the interface provided above.  You may assume that at any moment, at most one program is accessing the database file; therefore your locking system only needs to be concerned with multiple concurrent clients of your server.  Any attempt to lock a resource that is already locked should cause the current thread to give up the CPU, consuming no CPU cycles until the desired resource becomes available.
<br>
<br><b>Data file Format</b>
<br>The format of data in the database file is as follows:
<br>Start of file  4 byte numeric, magic cookie value. Identifies this as a data file  4 byte numeric, total overall length in bytes of each record  2 byte numeric, number of fields in each record
<br>Schema description section.  Repeated for each field in a record:  2 byte numeric, length in bytes of field name  n bytes (defined by previous entry), field name  2 byte numeric, field length in bytes  end of repeating block
<br>Data section.  Repeat to end of file:  1 byte "deleted" flag. 0 implies valid record, 1 implies deleted record  Record containing fields in order specified in schema section, no separators between fields, each field fixed length at maximum specified in schema information
<br>End of file
<br>All numeric values are stored in the header information use the formats of the DataInputStream and DataOutputStream classes. All text values, and all fields (which are text only), contain only 8 bit characters, null terminated if less than the maximum length for the field. The character encoding is 8 bit US ASCII.
<br>
<br><b>Database schema</b>
<br>The database that URLyBird uses contains the following fields:
<br>Field descriptive name	Database field name	Field length	Detailed description
<br>Hotel Name	name	64	The name of the hotel this vacancy record relates to
<br>City	location	64	The location of this hotel
<br>Maximum occupancy of this room	size	4	The maximum number of people permitted in this room, not including infants
<br>Is the room smoking or non-smoking	smoking	1	Flag indicating if smoking is permitted. Valid values are "Y" indicating a smoking room, and "N" indicating a non-smoking room
<br>Price per night	rate	8	Charge per night for the room. This field includes the currency symbol
<br>Date available	date	10	The single night to which this record relates, format is yyyy/mm/dd.
<br>Customer holding this record	owner	8	The id value (an 8 digit number) of the customer who has booked this. Note that for this application, you should assume that customers and CSRs know their customer ids. The system you are writing does not interact with these numbers, rather it simply records them. If this field is all blanks, the record is available for sale.
<br>
<br><b>Deliverables</b>
<br><b>Target Platform and Execution</b>
<br>Throughout this exercise, you must use exclusively the Java 2 platform. You may develop your code using any implementation of the Java 2 platform, but the submission that you return must have been tested and shown to work under a production (not development) version of the Sun Microsystems' Java 2 platform and that platform must not have been superseded by a new production version for more than 18 months by the time you make your submission.
<br>You are permitted to use any IDE tool you choose, but you must not submit any code that is not your own work. The final program must have no dependencies on any libraries other than those of the Java 2 Platform.
<br>When you submit your assignment, each part (client and server) must be executable using a command of this exact form:
<br>java -jar <path_and_filename> [<mode>]
<br>Your programs must not require use of command line arguments other than the single mode flag, which must be supported.  Your programs must not require use of command line property specifications. All configuration must be done via a GUI, and must be persistent between runs of the program. Such configuration information must be stored in a file called suncertify.properties which must be located in the current working directory.
<br>The mode flag must be either "server", indicating the server program must run, "alone", indicating standalone mode, or left out entirely, in which case the network client and gui must run.
<br>You must not require manual editing of any files by the examiners.
<br>Packaging of Submissions
<br>All elements of your submission must be packaged in a single JAR file. The JAR file must have the following layout and contents in its root:<ul>
<br>•	The executable JAR containing the programs. This must be called runme.jar.
<br>•	The original, unchanged database file that was supplied to you. Note that you must keep a copy of the original database file supplied to you, and this must be the file you submit. The marking process will expect the exact same data without any changes.
<br>•	A directory called code, containing all the source code and related parts of your project. You must create subdirectories within this to reflect your package structure and distribute your source files within those directories.
<br>•	A file called version.txt. This must contain pure ASCII (not a word processor format) indicating the exact version of JDK you used, and the host platform you worked on.
<br>•	A directory called docs, containing the following items at the top level:
<br>- These instructions.
<br>- A subdirectory called javadoc, containing HTML/Javadoc documentation for all classes and interfaces you are submitting.
<br>- A file called choices.txt that containing pure ASCII (not a word processor format) text describing the significant design choices you made. Detail the problems you perceived, the issues surrounding them, your value judgments, and the decisions that you made. This document should also describe any uncertainties you had regarding the project, and the decisions you made when resolving them.
<br>- User documentation for the database server and the gui client. If your user documentation is online then you may omit this file. However, if the documentation is not online, you must provide either a single plain ASCII (not word processor format) text document, which must be called userguide.txt, or multiple HTML files which must all be accessible from a starting point document that must be called userguide.html.
<br></ul>
<br>
<br><b>Marking Process</b>
<br>The marking is done in three phases.  First, software checks that overall structure and nomenclature conform to specification.  Second the examiner runs the code ensuring that it functions correctly through the specified operations. If any automatic failures are noted at this stage, the marking process terminates and the assignment is failed.
<br>Provided the essential behavioral requirements of the assignment have been correctly implemented, the examiner proceeds to investigate the design and implementation of your assignment. This process is time consuming, and it is because this is done carefully and thoroughly that submissions take time to grade. The grading process is closely controlled to ensure consistency and fairness, and it is performed according to criteria detailed in the next section. At any time during this process, if an automatic failure is noted, the marking process terminates, and the assignment is failed. For any design choice concerning topics not specifically described in the requirements, marks are awarded for a clear and consistent approach, rather than for any particular solution. Design decisions must be described briefly but clearly in your comments.
<br>In addition to the submission, you will be required to take a written examination. This exam tests your understanding of your submission and asks you to justify a number of design choices embodied in that submission.
<br>Automatic Failures
<br>Where this document uses the word "must" an absolute requirement is being described. If you fail to adhere to such a requirement, your assignment will be failed automatically, and without further evaluation.
<br> 
<br><b>Marking Criteria</b>
<br>Your work will be evaluated based on the following criteria. 
<br>The minimum passing score is 320 out of a possible 400 points.
<br>General Considerations (100 points),  Documentation (70 points),  Object-oriented design (30 points),  User Interface (40 points),  Locking (80 points),  Data class (40 points),  Server (40 points)      
<br>
<br>When you have completed your assignment and your essay exam, you may submit your assignment to developer-submit_US@oracle.com. Your submission may be made by email. Make sure to include you Prometric ID when you make your submission. You have one year to complete your assignment and your essay. Assessors will take 4-6 weeks to grade our assignment and return results to you.
<br>
<br>
<br><br>
			<br>          <table border="0" width="98%" cellspacing="0" cellpadding="3">
				 <input type="hidden" id="tei_displayed" name="tei_displayed" value="299444176">
				 <input type="hidden" id="tei299444176_itemtype" name="tei299444176_itemtype" value="1">
          </table>

	</mode></path_and_filename></td>
  <!-- paint_item_bottom -->
   </tr>
   </tbody></table>
   </td>
 </tr>
 </tbody></table>&nbsp;
		<!--START: new bottom bar-->
		<table style="border:silver 1px solid;" align="center" border="0" cellspacing="0" width="100%" cellpadding="4">
		<tbody><tr><td nowrap="" colspan="2" style="padding:0 0 0 0;" class="BGLightGold" align="center">&nbsp;<img style="display:none;border:silver 1px solid;" name="goP2" id="goPid2" src="./Prometric Online Testing_files/go_still.gif" height="7" width="250">&nbsp;</td></tr>		<tr>
			<td width="50%" class="BGLightGold" align="right" valign="middle">
&nbsp;          </td>
			<td width="50%" align="left" class="BGLightGold" valign="middle">&nbsp;
				<input class="IFix" type="submit" style="width:120px;height:25px" value="Next" id="cmdNextBottom" name="cmdNext" onclick="frm1ButtonClick=this.id;">
			</td>
		</tr>
        <tr align="center">
			<td colspan="2" align="center" class="BGBlue">
				<b>© 2011 - Certification</b>
			</td>
        </tr>
		</tbody></table>
		<!--END:   new bottom bar-->
</form>




</body></html>